I"z<p><img src="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/_images/esp32-devkitc-functional-overview.jpg" alt="" /></p>

<p>感觉应该挺简单一事儿，结果历经坎坷，最终终于完成。</p>

<h3 id="为什么不用win环境">为什么不用WIN环境</h3>

<p>不是不想，是有问题，特别是结合powershell一起用的情况下，各种坑，选择放弃。</p>

<h3 id="为什么是wsl而不是虚拟机">为什么是WSL而不是虚拟机</h3>

<p>WIN环境下的linux开发，强烈推荐WSL，配合powershell(也即cmder)一起，有一种winux(win + linux)的感觉，如鱼得水，非常棒。当然了WSL也有它的问题，比如IO效率差，不支持桌面环境，不支持显卡设备之类的，甚至一般的设备驱动都可能存在问题。但是绝大部分的情况下，我是强烈推荐使用的。同一个shell下面，既可执行linux的命令，也可以运行window命令，既可以访问linux目录，也可以访问window目录，融为了一体，这不是简单一个虚拟机共享文件夹可以有的体验。</p>

<p>虚拟机是物理层级的抽象，上面的linux环境就是一个真实linux环境，加上当前CPU对各种虚拟化指令的加持，使得虚拟机性能非常高(几乎和宿主一样高)。WSL是系统调用层级的抽象，然后在上面跑一套修改过的kernel。还有一个与开发相关的点是守护进程管理，WSL不支持systemd，但是也提供了一套类似的机制，并不完备，所以使用某些服务的时候会有一些坑。关于WSL的细节，可以参考<a href="https://blogs.msdn.microsoft.com/wsl/2016/04/22/windows-subsystem-for-linux-overview/">这里</a>；</p>

<p>再说一说WSL2。WSL官方实锤是已经放弃了，马上要出WSL2：基于Hyper-V虚拟技术实现的linux子系统。说白了，就是挂一个虚拟机，然后上面跑完整的linux环境。虽然叫WSL2，但是与WSL是完全不一样的东西。那么问题来了，我vmware，virtualBox用的好好的，为啥要用你巨硬的Hyper-V？所以，我的态度是观望。</p>

<h3 id="安装步骤">安装步骤</h3>

<p>安装步骤官方有详细的说明，请参考<a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/get-started/index.html#get-started-step-by-step">这里</a>，按照里面linux环境的方式来配置即可，这里主要是记录下碰到的问题。</p>

<h3 id="问题">问题</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>解决一时爽，一直解决一直爽？不存在的，都是在浪费时间。
                                    
                                    ———— Ash
</code></pre></div></div>

<h4 id="1-cmder下进入wsl后vim的方向键失灵">1、 cmder下进入wsl后vim的方向键失灵</h4>

<p>看问题的标题就感觉很纠结，但是google发现还是非常多人说这个问题，看来cmder+wsl是很多人的菜。解决问题的方法是修改cmder的配置如下图：</p>

<p><img src="http://pic.ashliu.com/20190726135558.png" alt="" /></p>

<p>看红框所示的意思是：启动bash的时候，带入<code class="highlighter-rouge">~ -cur_console:p5</code>参数p5是解决问题的关键，其他人说用的什么p:n都不行。</p>

<h4 id="2idfpy无法使用串口提示termioserror-5-inputoutput-error">2、idf.py无法使用串口，提示<code class="highlighter-rouge">termios.error: (5, 'Input/output error')</code></h4>

<p>使用idfdownload和monitor都会报这个错误，问题的原因是silicon lab的usb驱动有问题，这里说的是win环境的驱动。到pololu官网下载它的cp2102驱动，在<a href="https://www.pololu.com/file/0J14/pololu-cp2102-windows-121204.zip">这里</a>，安装新驱动即可。</p>

<h4 id="3idfpy依然无法下载的问题">3、idf.py依然无法下载的问题</h4>

<p>按照上面操作后，串口看起来是没问题的，包括monitor命令都可以正常运行。但是下载死活不行，我怀疑是wsl对串口的驱动依然存在某些问题。昨天就卡在了这里，毫无进展一度准备放弃，最后准备直接用window的GUI工具实现下载得了。</p>

<p>今天在用GUI工具过程中想到了解决方案：wsl支持运行exe，可以用esptool.exe代替esptool.py，从而走win的下载方式，同时又和linux环境是整合一起的，真是妙！</p>

<p>说干就干，实现其实非常简单了，把idf.py指向的下载命令，替换为esptool.exe：</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">flash</span><span class="p">(</span><span class="n">action</span><span class="p">,</span> <span class="n">ctx</span><span class="p">,</span> <span class="n">args</span><span class="p">):</span>
    <span class="s">"""
    Run esptool to flash the entire project, from an argfile generated by the build system
    """</span>
    <span class="n">flasher_args_path</span> <span class="o">=</span> <span class="p">{</span>  <span class="c1"># action -&gt; name of flasher args file generated by build system
</span>        <span class="s">"bootloader-flash"</span><span class="p">:</span> <span class="s">"flash_bootloader_args"</span><span class="p">,</span>
        <span class="s">"partition_table-flash"</span><span class="p">:</span> <span class="s">"flash_partition_table_args"</span><span class="p">,</span>
        <span class="s">"app-flash"</span><span class="p">:</span> <span class="s">"flash_app_args"</span><span class="p">,</span>
        <span class="s">"flash"</span><span class="p">:</span> <span class="s">"flash_project_args"</span><span class="p">,</span>
        <span class="s">"encrypted-app-flash"</span><span class="p">:</span> <span class="s">"flash_encrypted_app_args"</span><span class="p">,</span>
        <span class="s">"encrypted-flash"</span><span class="p">:</span> <span class="s">"flash_encrypted_project_args"</span><span class="p">,</span>
    <span class="p">}[</span>
        <span class="n">action</span>
    <span class="p">]</span>

    <span class="c1"># ash modify here
</span>    <span class="c1"># Use windows env's esptool.exe
</span>    <span class="n">esptool_args</span> <span class="o">=</span> <span class="n">_get_esptool_args</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
    <span class="n">esptool_args</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span>
        <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">"IDF_PATH"</span><span class="p">],</span> <span class="s">"components/esptool_py/esptool/esptool.exe"</span>
    <span class="p">)</span>
    <span class="n">esptool_args</span> <span class="o">+=</span> <span class="p">[</span><span class="s">"write_flash"</span><span class="p">,</span> <span class="s">"@"</span> <span class="o">+</span> <span class="n">flasher_args_path</span><span class="p">]</span>
    <span class="n">_run_tool</span><span class="p">(</span><span class="s">"esptool.py"</span><span class="p">,</span> <span class="n">esptool_args</span><span class="p">[</span><span class="mi">1</span><span class="p">:],</span> <span class="n">args</span><span class="o">.</span><span class="n">build_dir</span><span class="p">)</span></code></pre></figure>

<p>其中，<code class="highlighter-rouge">_run_tool</code>函数的第二个参数是执行的命令(subprocess.check_call的调用，所以是列表格式)，去掉第一个是因为其默认用的python解析器，而我们需要直接执行exe；</p>

<p>这样就可以直接用idf.py实现载，传递的串口要注意是win下的：<code class="highlighter-rouge">COM3</code> ， 而不是wsl下的：<code class="highlighter-rouge">/dev/ttyS3</code>;</p>

:ET